{"version":3,"sources":["util.js","Map.js","InfoBox.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","mulitiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","casesType","countries","caseType","center","zoom","ChangeView","useMap","setView","className","MapContainer","scrollWheelZoom","TileLayer","attribution","url","map","country","Circle","countryInfo","lat","long","fillOpacity","pathOptions","color","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","InfoBox","title","isRed","isGray","active","total","props","Card","onClick","CardContent","Typography","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCaseType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42165e10.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204,16,52)\",\r\n    mulitiplier: 800,\r\n  },\r\n\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    rgb: \"rgb(125,215,29)\",\r\n    mulitiplier: 1200,\r\n  },\r\n\r\n  deaths: {\r\n    hex: \"gray\",\r\n    rgb: \"rgb(251,68,67)\",\r\n    mulitiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  \r\n  sortedData.sort((a,b) => {\r\n    if(a.cases > b.cases){\r\n      return -1;\r\n    }else{\r\n      return 1;\r\n    }\r\n    })\r\n  return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => \r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType) => (\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[casesType] / 10) * casesTypeColors[casesType].mulitiplier }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\" style={{backgroundImage : `url(${country.countryInfo.flag})`}}/>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">Cases : {numeral(country.cases).format(\"0.0\")}</div>\r\n          <div className=\"info-recovered\">Recovered : {numeral(country.recovered).format(\"0.0\")}</div>\r\n          <div className=\"info-deaths\">Deaths : {numeral(country.deaths).format(\"0.0\")}</div>\r\n\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ))\r\n);","import React from 'react'\r\nimport {MapContainer, TileLayer, useMap} from 'react-leaflet';\r\nimport './App.css';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, caseType, center, zoom}) {\r\n\r\n    const ChangeView = ({center, zoom}) =>{\r\n\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"map\">\r\n            <MapContainer caseType={caseType} center={center} zoom={zoom} scrollWheelZoom={false}>\r\n                <ChangeView center={center} zoom={zoom} />\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {showDataOnMap(countries, caseType)}\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport {Card, CardContent, Typography, } from '@material-ui/core';\r\n\r\n\r\nfunction InfoBox({title, isRed, isGray, active, cases, total, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} \r\n        ${isRed && \"infoBox--Red\"} ${isGray && \"infoBox--Gray\"}`}>\r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                {/* Number of Cases */}\r\n                <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"} ${isGray && \"infoBox_cases--gray\"}`}>\r\n                {cases}</h2>\r\n\r\n                {/* Total Cases */}\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n            \r\n        </Card>\r\n    )\r\n};\r\n\r\nexport default InfoBox;\r\n\r\n\r\n","import React from 'react'\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\nconst buildChartData = (data, caseType) => {\r\n    const chartData = [];\r\n    let lastDataPoint ;\r\n     for (let date in data.cases) {\r\n        if(lastDataPoint){\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[caseType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[caseType][date];\r\n    }\r\n    return chartData;\r\n}\r\n\r\nfunction LineGraph({caseType, ...props}) {\r\n    const[data,setData] = useState({});\r\n\r\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n    \r\n\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) =>{\r\n                let chartData = buildChartData(data, caseType);\r\n                setData(chartData);\r\n            })\r\n\r\n        }\r\n       fetchData();\r\n    },[caseType])\r\n\r\n    \r\n\r\n    return (\r\n        <div className={props.className}>\r\n            \r\n            {data?.length > 0 &&(\r\n                <Line \r\n                    options={options}\r\n                    data={{\r\n                        datasets: [{\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                            borderColor: \"#CC1034\",\r\n                            data: data\r\n                        }]\r\n                    }}\r\n                />\r\n            ) }\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import { FormControl, MenuItem, Select, Card, CardContent} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Map from './Map';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport { prettyPrintStat, sortData } from './util';\nimport 'leaflet/dist/leaflet.css';\n\n// https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries,setCountries] = useState([]);\n  const[country,setCountry] = useState(\"worldwide\");\n  const [countryInfo,setCountryInfo] = useState({});\n  const [tableData,setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796,\n  });\n  // console.log(mapCenter);\n  const [mapZoom, setMapZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([]);\n  const[caseType, setCaseType] = useState(\"cases\");\n  \n\n  useEffect(() =>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => {\n          setCountryInfo(data)\n        })\n  },[])\n\n    useEffect(() => {\n      const getCountriesData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,//name of the country\n              value: country.countryInfo.iso2, // UK,USA,IN\n            }\n          ));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n      };\n      getCountriesData();\n    },[]);\n\n    const onCountryChange = async (event) =>{\n      const countryCode = event.target.value;\n      setCountry(countryCode);\n\n      const url = countryCode === \"worldwide\"\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n      await fetch(url)\n      .then(response => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode === \"worldwide\"\n        ? setMapCenter([34.80746, -40.4796])\n        : setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n        setMapZoom(4);\n      });\n      \n    }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER </h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n            <MenuItem value=\"worldwide\">worldwide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app_stats\">\n          {/* InfoBoxes title=\"Coronavirus Cases\"*/}\n          {/* InfoBoxes title=\"Coronavirus Recovery\"*/}\n          {/* InfoBoxes title=\"Coronavirus Death\"*/}\n          <InfoBox\n            isRed\n            active = {caseType === \"cases\"}\n            onClick = {(e) => setCaseType(\"cases\")} \n            title=\"Coronavirus Cases\" \n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}    \n          />\n          <InfoBox\n            active = {caseType === \"recovered\"}\n            onClick = {(e) => setCaseType(\"recovered\")} \n            title=\"Recovered\" \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isGray\n            active = {caseType === \"deaths\"}\n            onClick = {(e) => setCaseType(\"deaths\")}\n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        \n\n        {/* Map */}\n        \n        <Map\n          caseType={caseType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n        \n      </div>\n      \n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          {/* Table */}\n          <Table countries={tableData}/>\n          <h3>Worldwide new {caseType}</h3>\n          {/* Graph */}\n          <LineGraph className=\"app_graph\" caseType={caseType}/>\n        </CardContent> \n      </Card>\n              \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}